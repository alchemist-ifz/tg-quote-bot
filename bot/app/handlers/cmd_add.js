export default async function cmdAdd(ctx) {

  try {

    ctx.log.info("/add call");

    const msg = ctx.update.message;

    const extra = {
      reply_to_message_id: msg.message_id,
    };

    if (!ctx.state.mainSet) {
      return await ctx.reply(`‚ö†Ô∏è –û—Ç—É—Å—Ç—Å—Ç–≤—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤.`, extra);
    }

    const setName = ctx.state.mainSet;

    if (!msg.reply_to_message || !msg.reply_to_message.sticker) {
      return await ctx.reply(`‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞–±–æ—Ä.`, extra);
    }

    const { sticker } = msg.reply_to_message;

    if (sticker.is_animated || sticker.is_video) {
      return await ctx.reply(`‚ö†Ô∏è –í –Ω–∞–±–æ—Ä –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã.`, extra);
    }

    await ctx.telegram.addStickerToSet(ctx.config.owner_id, setName, {
      png_sticker: msg.reply_to_message.sticker.file_id,
      emojis: 'üòº',
    });

    return await ctx.reply(`‚úÖ –°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω.`, extra);

  } catch (err) {

    ctx.log.error({ err, desc: "/add", update: ctx.update });

    const extra = {
      reply_to_message_id: ctx.update.message.message_id,
    };

    return await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –≤ –Ω–∞–±–æ—Ä.`, extra);

  }

}
