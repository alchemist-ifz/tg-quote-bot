export default async function cmdNewPack(ctx) {

  try {

    ctx.log.info("/newpack call");

    if (!ctx.isAdmin) {
      return;
    }

    const msg = ctx.update.message;

    const extra = {
      reply_to_message_id: msg.message_id,
    };

    let setName = msg.text.slice(msg.entities[0].length + 1).toLowerCase();

    if (typeof setName !== "string" || setName === "") {
      return await ctx.reply(`‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞.`, extra);
    }

    setName += `_by_${ctx.botInfo.username}`;

    if (ctx.state.sets[setName]) {
      return await ctx.reply(`‚ö†Ô∏è –¢–∞–∫–æ–π –Ω–∞–±–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`, extra);
    }

    if (!setName.match(/^[a-z]/i)) {
      return await ctx.reply(`‚ö†Ô∏è –ò–º—è –Ω–∞–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –ª–∞—Ç–∏–Ω—Å–∫–æ–π –±—É–∫–≤—ã.`, extra);
    }

    await ctx.telegram.createNewStickerSet(ctx.config.owner_id, setName, `Created by @${ctx.botInfo.username}`, {
      png_sticker: { source: './assets/sticker_placeholder.webp' },
      emojis: 'üòº'
    });

    ctx.state.sets[setName] = true;

    if (ctx.state.mainSet === "") {
      ctx.state.mainSet = setName;
    }

    return await ctx.reply(`‚úÖ –ù–∞–±–æ—Ä —Å–æ–∑–¥–∞–Ω: https://t.me/addstickers/${setName}.`, extra);

  } catch (err) {

    ctx.log.error({ err, desc: "/newpack", update: ctx.update });

    const extra = {
      reply_to_message_id: ctx.update.message.message_id,
    };

    return await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Ä.`, extra);

  }

}
