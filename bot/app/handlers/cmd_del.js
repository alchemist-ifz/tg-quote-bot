export default async function cmdDel(ctx) {

  try {

    ctx.log.info("/del call");

    if (!ctx.isAdmin) {
      return;
    }

    const msg = ctx.update.message;

    const extra = {
      reply_to_message_id: msg.message_id,
    };

    if (!ctx.state.mainSet) {
      return await ctx.reply(`‚ö†Ô∏è –û—Ç—É—Å—Ç—Å—Ç–≤—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤.`, extra);
    }

    const setName = ctx.state.mainSet;

    if (msg.reply_to_message && msg.reply_to_message.sticker) {

      const { sticker } = msg.reply_to_message;

      const stickerSet = await ctx.telegram.getStickerSet(setName);

      const isFirstSticker = stickerSet.stickers[0].file_id === sticker.file_id;

      if (ctx.config.protect_kitten && isFirstSticker) {
        return await ctx.reply(`‚ö†Ô∏è –£–¥–∞–ª—è—Ç—å –∫–æ—Ç–∏–∫–∞ –Ω–µ–ª—å–∑—è. üòº`, extra);
      }

      const stickerInSet = stickerSet.stickers
        .filter(s => s.file_id === sticker.file_id).length === 0;

      if (stickerInSet) {
        return await ctx.reply(`‚ö†Ô∏è –¢–∞–∫–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–±–æ—Ä–µ.`, extra);
      }

      await ctx.telegram.deleteStickerFromSet(sticker.file_id);

      return await ctx.reply(`‚úÖ –°—Ç–∏–∫–µ—Ä —É–¥–∞–ª—ë–Ω.`, extra);

    }

    const arg = msg.text.slice(msg.entities[0].length + 1).trim();
    const position = arg ? parseInt(arg) : 0;

    if (!arg || !Number.isFinite(position)) {
      return await ctx.reply(`‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∏–∫–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (–Ω–∞—á–∏–Ω–∞—è —Å 0).`, extra);
    }

    if (ctx.config.protect_kitten && position === 0) {
      return await ctx.reply(`‚ö†Ô∏è –£–¥–∞–ª—è—Ç—å –∫–æ—Ç–∏–∫–∞ –Ω–µ–ª—å–∑—è. üòº`, extra);
    }

    const stickerSet = await ctx.telegram.getStickerSet(setName);

    if (!stickerSet.stickers[position]) {
      return await ctx.reply(`‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`, extra);
    }

    const fileId = stickerSet.stickers[position].file_id;
    await ctx.telegram.deleteStickerFromSet(fileId);

    return await ctx.reply(`‚úÖ –°—Ç–∏–∫–µ—Ä —É–¥–∞–ª—ë–Ω.`, extra);

  } catch (err) {

    ctx.log.error({ err, desc: "/del", update: ctx.update });

    const extra = {
      reply_to_message_id: ctx.update.message.message_id,
    };

    return await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –∏–∑ –Ω–∞–±–æ—Ä–∞.`, extra);

  }

}
